1.先创建好需要的包
    exception异常包
    interceptor拦截包
        里面有一个logininterceptor拦截方法，由于工程刚搭建所以放行任何请求
    settings系统设置包
        domain(目前模拟的实体类entiy包)
        dao访问数据库的dao包
        service实现业务逻辑的包（service接口以及service实现类）
        web下的contrllor包（serverlet）
    utils工具包（里面的工具下载即可没必要手动写）
    workbench工作台包
2.开始玩代码了！
    1）获取用户输入的用户名与密码并通过ajax向controller发送参数
            *用户名与密码的输入框设置属性id
            *登陆按钮设置id（点击登陆按钮触发事件）
            *在<script>中书写代码，当点击登录按钮时，
                通过用户名与密码的id获得其值
                    var loginAct=$("#loginAct").val();
                    var loginPwd=$("#loginPwd").val();
                判断其是否为null或""
                不是则通过ajax将数据发送至controller处理器类
            *ajax参数作用（部分）
                url:     (默认: 当前页地址) 发送请求的地址。
                type:  (默认: "GET") 请求方式 ("POST" 或 "GET")， 默认为 "GET"。
                timeout:  设置请求超时时间（毫秒）。此设置将覆盖全局设置。
                data: 发送到服务器（controller）的数据。将自动转换为请求字符串格式。GET 请求中将附加在 URL 后。
                           "xml": 返回 XML 文档，可用 jquery 处理。
                           "html": 返回纯文本 HTML 信息；包含 script 元素。
                           "script": 返回纯文本 JavaScript 代码。不会自动缓存结果。
                           "json": 返回 JSON 数据 。
                           success:请求成功后回调函数。这个方法有两个参数：
                           服务器返回数据(data)，返回状态(textStatus)
                           success中服务器返回的数据就是整个json对象，可以通过数据.json中前面的值来获取
                           json后面的值
    2）接收ajax传过来的数据并调用业务层的查询方法来查询用户是否存在，根据查询结果向login返回信息
            congtroller包下创建中央处理器类UserController
            类上注解@Controller将类对象创建交给spring容器
            @RequestMapping指定该类为中央处理器类并设置别名
            由于login页面希望返回一个json数据，所以创建一个返回值为Map集合类型的方法
            方法上标注@RequestMapping与 @ResponseBody（让返回类型转换为json类型）
            给传入的密码进行md5加密
            调用业务层的查询方法通过用户名跟密码获得用户对象（得创建一个userservice对象并Autowired）
            判断用户对象是不是为null，为null证明登陆失败，返回登陆失败信息
            将登陆失败信息存入map集合，code、msg、data
            成功也存入Map集合（这样login页面能根据data的code来判断登陆成功或失败）
            返回map集合
    3）在service中调用dao中的查询方法
            目前没有什么业务逻辑处理，所以service层只是简单的调用dao层中的查询方法
            service接口与sevice接口实现类
    4）通过Dao包中的dao接口以及映射文件完成查询
            查询时不查询密码，这样不安全
    5）创建实体类（domain）并完成序列化（）实现Serializable接口
             存储时需要序列化

登录模块功能升级：进行登陆校验
     总的来说就是将controller中的业务逻辑转到的service中并添加了新的逻辑
     login页面：无需改动
     UserController:
        *通过request获取ip地址并传入到service层中，方便之后的ip校验
        *本次是校验登陆，所以之前通过userservice调用findByLoginPwdAndLoginPwd来查询用户对象的
         的方法不需要了，新建一个查询方法但是Map类型的
         Map<String, Object> resultMap = userService.findByLoginPwdAndLoginPwdCondition()
         然后通过map中的data字段获取用户对象resultMap.get("data")
         user为null的话直接返回resultMap可，这里的业务逻辑将在service中完成而不在UserController中完成
         将User对象存入到Session中（后面实现权限认证时使用）
         登陆成功后清除data信息通过resultMap.remove("data")
     service:
         在调用userService的查询方法时进入service层
         service接口除了普通登陆方法还多了一个校验登陆方法
         service实现类重写了这个新方法
         然后调用userdao中的查询方法获得一个user对象（这步并未改变）
         关键是接下来的
            根据user中的各个信息来判断是否允许登陆
            user为null则用户名或密码错误，在方法内新创建的Map<String, Object> resultMap中
            添加   if (user==null){
                          resultMap.put("code",10001);
                          resultMap.put("msg","用户名或密码错误");
                          resultMap.put("data",null);
                          return resultMap;
                      }
            这样可以理解为什么之前的controller中user为null可以直接返回resultMap了
            这里已经把业务逻辑写好并传回去了
            接着根据用户的ip、锁定状态、过期时间来判断其是否可以登陆
            都通过后返回登陆成功的信息
登录功能之后台跳转
    在拦截类中进行一个判断，判断session中的user是否为null，为null则跳转到登陆页面
    防止用户通过内容网址的方式绕过登陆直接访问
    *将login.jsp移动到jsp文件夹下
    *放到jsp文件夹内为了使视图解析器可以生效
    *jsp文件移动后会在路径后自动添加../，需要将其移除
    *实现后台跳转有两种方法
            1.通过return "redirect:/settings/user/tologin.do"这种方式
                在拦截器类跳转到tologin.do后应去UserController中写tologin.do方法
                并return "/login"
            2.抛出异常让异常处理器类来完成跳转（需要手动将异常类粘贴到异常包中）
                直接throw new InterceptorException()
                去applicationContext-web中添加
                <mvc:exclude-mapping path="/settings/user/toLogin.do"/>
                用来放行跳转页面的请求防止重定向次数过多
            无论用哪种方法都要去index.html页面中将href改成
            document.location.href = "settings/user/toLogin.do"
            因为服务器默认登陆Index.html，这样就会自动跑到tologin.do的方法中
            3.在MyExceptionResolver异常处理器中,会根据抛出的异常,来决定访问哪个方法
              * 自定义异常和异常处理器,在资料中复制过来即可
              * 在异常处理器捕获到InterceptorException异常后,重定向访问登录页面
十天免密登陆与跳转到工作台页面
    大致思路：
            前端页面
            在登录的ajax请求中,传递一个参数(标记)到后台,比如flag,值可以为任意
            如果传递了该值,证明是要进行十天免登陆操作
            没有没有传递或该值为空,证明是普通的登录操作

            1.在十天免登录的文本框下定义一个用来存值的type为hidden的文本框，id为flag
            2.给“十天免登录”设置一个id="ck"
            3.在<scrppt>中完成一个选中复选框触发click事件的方法（写在了之前的$(function ()中）
            4.方法内通过this.check获取当前复选框的状态，若为true,通过$("#flag").val("a")
                给flag赋值a
            5.通过var flag=$("#flag").val()获得其值后再通过ajax中的data将值传入到UserController
            后台业务
            *登录操作方法(向Cookie中存入用户名和密码)
            *在登录成功后进行判断
            *如果flag标记为a,那么则进行十天免登陆操作
            *通过Cookie存储用户名和密码(md5)
            *不用担心密码被泄露
             在登录之前是对密码进行加密的,如果传递的是已加密的密码,会进行再次加密,得不到我们真是的密码
             传统项目,使用的都是自己本地的电脑,所以不用担心别人会窃取
            *设置Cookie参数
             Path路径
             Cookie的过期时间
            *由于Cookie是具备覆盖性,每个Cookie存储一个值
             需要两个Cookie,一个用来存储用户名,另一个用来存储密码
            1.判断a与传入的flag是否相同,这里login(login.do)方法需要增加一个String类型的flag
            2.相同则将用户名（loginAct）、密码（loginPwd）添加到cookie中
              通过new cookie()添加
            3.再通过setPath、setMaxAge来设置路径与过期时间
            4.通过response对象将cookie传回浏览器
            跳转到工作台页面
            1.在web-controller包下创建一个WorkbenchIndexController类(别名为Workbench)
            2.创建一个toIndex方法（别名为toIndex.do）
            3.return 到WEB-INF下jsp包中的index方法
              将index.html改为index.jsp,将约束粘过去，去除../,更改后缀
            4.在login.jsp中将原本的"登陆成功"改为
              window.location.href="workbench/toIndex.do";
            5.通过$("#ck").prop("checked",false)清空十天免登录的选中状态
            自动登录
            *用户进入登陆页面后，页面会先获取Cookie数据(用户名和密码)
                如果没有获取到说明没有点击十天免登录，也就不执行自动登录
            *登录操作,自动调用userService中的findUserByLoginActAndLoginPwdCondition方法
            来完成登陆动作（代替了click动作），如果没有抛出异常,并返回User对象,证明登录成功
            *跳转到工作台页面
            *如果抛出异常,交给异常处理器进行处理
退出登陆功能
        什么是模态窗口
        模态窗口:实际上就是一个div标签,通过点击的方式进行打开
        data-toggle="modal" : 操作的是模态窗口
        data-target="#exitModal" : 打开具体哪一个模态窗口
        在打开模态窗口的时候,可以通过背景的渐变和div标签的动画,来触发
        在js代码中如何打开和关闭模态窗口
        $("#模态窗口唯一标识").modal("show"),显示模态窗口
        $("#模态窗口唯一标识").modal("hide"),隐藏模态窗口
        业务逻辑
        点击工作台首页面,右上角的用户名称
        选择退出
        弹出的模态窗口中,点击确定按钮,发送一个请求
        window.location.href="settings/user/logout.do"
        后台代码
        在userController中创建logout方法
        方法内完成清空session数据
                清除cookie用户名与密码
                return到登陆页面
        退出操作时,需要清除session中的用户数据
        清除cookie中的用户名和密码
        重定向到用户登录页面

        路径：
            jsp页面发送路径都写相对路径，前面都不带”/“
            后台访问都是带"/"，特别是页面跳转以及重定向
显示页面
		window.open("workbench/main/toIndex.do","workareaFrame");
        window.open //加载内容区域页面
        参数一:页面的请求地址
        参数二:加载容器
        在web-controller包下新创建一个处理器类别名为/workbench/main
        内有别名为toIndex.do的方法，return到"/workbench/main/index"
细节处理
        将右上角写死的"zhangsan",改成当前登陆的用户名
        在main/index.jsp中找到写死的zhangsan,将其替换成${user.name}(从session中获得用户名)
跳转系统设置页面
        在index页面中系统设置标签将href改为settings/toIndex.do
        在setting/Controller包下新增SettingsIndexController类
        里面有跳转方法toIndex
        (将index.html改为jsp页面)
修改我的资料
        将里面对应的数据改成${user.属性}
        失效时间用三目运算符来完成
            失效时间：<b>${user.expireTime==""?'永不过期':user.expireTime}
修改密码
        *传递的参数
        *用户名,原密码,修改后的密码
        在前端页面获取输入的原密码、新密码、确认密码、用户名以及用户id
        判断输入是否为空以及两次密码输入是否一致
        通过ajax将数据传入，如果返回code=10000更新成功，否则失败
        *后台
        *根据用户名和密码,将User查询出来
        *设置新密码(md5)
        在usercontroller床技安updatePwd.do方法
        方法中调用userservice的updataPwd方法并把id,loginPwd,oldPwd,newPwd参数传入
        创建Map集合
        如果返回的user为null，map中添加code==10001,msg=原密码输入错误
        成功添加code==10000,msg=更新成功
        userService添加对应接口并实现类实现
        实现类接收传过来的参数
        创建dao方法根据id查询的方法
        如果查询的user不为null，并且旧密码与数据库中查到的密码一致(这里旧密码需要加密再与数据库中的比对
        因为数据库中存储的是加密后的密码）
        给新密码用MD5加密然后通过set方法直接将密码更改(改的是数据库对应的表中的密码而不是数据库中的密码)
        创建dao方法更新user的方法，然后返回user,否则返回Null
        dao接口创建findbyId和updatePwdById
        在映射文件中完成查询与更新的sql语句


        在js代码中获取user对象使用EL表达式$符号时一定要用引号”“将其括起来
        否则会语法报错